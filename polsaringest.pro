; docformat = 'rst'
; polSARingest.pro
;    This program is free software; you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation; either version 2 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.

;+
; :Description:
; Function to ingest georeferenced single, dual or quad polSAR 
; files generated by ENVI/SARscape or polSARpro/MapReady 
; from TerraSAR-X, Radarsat-2, Cosmo-Skymed SLC images and 
; convert to a single float32 image.
; :Params:
;      dirname:  in, required
;         directory containing polarimetric image files
; :KEYWORDS:
;    dims: in, optional
;         desired spatial subset for generated file
;    outim: out
;         polarimetric image     
;    bnames: out
;         list of band names
;    map_info: out
;         georeference information   
; :USES:
;    ENVI  
; :RETURNS:
;        1 on success, else 0  
; :Author:
;    Mort Canty (2014)
;-    
function polSARingest, dirname, dims=dims, outim=outim, bnames=bnames, map_info=map_info

   COMPILE_OPT IDL2
; Standard error handling.
   Catch, theError
   IF theError NE 0 THEN BEGIN
     Catch, /CANCEL
     void = Error_Message()
     RETURN, 0
   ENDIF
   
   cd, dirname
   
   if n_elements(dims) eq 0 then nodims = 1 else nodims = 0
   
; output image (float32, bsq)
   bandnames = ['C11','C12re','C12im','C13re','C13im','C22','C23re','C23im','C33']    
 
; get a list of all files   
   files = file_search()
; accumulate the matrix elements 
   foreach file, files do begin    
;   special case: single polarimetry, only generated by ENVI/SARscape    
     if stregex(file,'pwr_geo',/boolean) and not stregex(file,'hdr|sml',/boolean) then begin
       envi_open_file, file, r_fid=fid
       if nodims then envi_file_query, fid, dims=dims       
       outim = envi_get_data(fid=fid,dims=dims,pos=0)
; map tie point (single)
       map_info = envi_get_map_info(fid=fid)
       envi_convert_file_coordinates, fid, $
         dims[1], dims[3], e, n, /to_map
       map_info.mc = [0D,0D,e,n]
       envi_file_mng,/remove,id=fid
     endif    
;   dual and quad polarimetry, ENVI/SARscape or polSARPro/Mapready     
     if (stregex(file,'hh_hh_geo',/boolean) or stregex(file,'C11.tif',/boolean) or stregex(file,'C11.bin',/boolean)) and not stregex(file,'hdr|sml',/boolean) then begin
       envi_open_file, file, r_fid=fid
       if nodims then envi_file_query, fid, dims=dims
       if n_elements(outim) eq 0 then begin
        cols = dims[2]-dims[1]+1
        rows = dims[4]-dims[3]+1
        outim = fltarr(cols,rows,9)
       endif
       outim[*,*,0] = envi_get_data(fid=fid,dims=dims,pos=0)
;   map tie point (dual or quad)
       map_info = envi_get_map_info(fid=fid)
       envi_convert_file_coordinates, fid, $
         dims[1], dims[3], e, n, /to_map
       map_info.mc = [0D,0D,e,n]
       envi_file_mng,/remove,id=fid
     endif    
      if (stregex(file,'re_hh_hv_geo',/boolean) or stregex(file,'C12_real.tif',/boolean) or stregex(file,'C12_real.bin',/boolean)) and not stregex(file,'hdr|sml',/boolean) then begin 
        envi_open_file, file, r_fid=fid
        if nodims then envi_file_query, fid, dims=dims
        if n_elements(outim) eq 0 then begin
          cols = dims[2]-dims[1]+1
          rows = dims[4]-dims[3]+1
          outim = fltarr(cols,rows,9)
        endif
        outim[*,*,1] = envi_get_data(fid=fid,dims=dims,pos=0)
        envi_file_mng,/remove,id=fid
      endif 
      if (stregex(file,'im_hh_hv_geo',/boolean) or stregex(file,'C12_imag.tif',/boolean) or stregex(file,'C12_imag.bin',/boolean)) and not stregex(file,'hdr|sml',/boolean) then begin 
        envi_open_file, file, r_fid=fid
        if nodims then envi_file_query, fid, dims=dims
        if n_elements(outim) eq 0 then begin
          cols = dims[2]-dims[1]+1
          rows = dims[4]-dims[3]+1
          outim = fltarr(cols,rows,9)
        endif
        outim[*,*,2] = envi_get_data(fid=fid,dims=dims,pos=0)
        envi_file_mng,/remove,id=fid        
      endif     
      if (stregex(file,'re_hh_vv_geo',/boolean) or stregex(file,'C13_real.tif',/boolean) or stregex(file,'C13_real.bin',/boolean)) and not stregex(file,'hdr|sml',/boolean) then begin 
        envi_open_file, file, r_fid=fid
        if nodims then envi_file_query, fid, dims=dims
        if n_elements(outim) eq 0 then begin
          cols = dims[2]-dims[1]+1
          rows = dims[4]-dims[3]+1
          outim = fltarr(cols,rows,9)
        endif
        outim[*,*,3] = envi_get_data(fid=fid,dims=dims,pos=0)
        envi_file_mng,/remove,id=fid        
      endif 
      if (stregex(file,'im_hh_vv_geo',/boolean) or stregex(file,'C13_imag.tif',/boolean) or stregex(file,'C13_imag.bin',/boolean)) and not stregex(file,'hdr|sml',/boolean) then begin 
        envi_open_file, file, r_fid=fid
        if nodims then envi_file_query, fid, dims=dims
        if n_elements(outim) eq 0 then begin
          cols = dims[2]-dims[1]+1
          rows = dims[4]-dims[3]+1
          outim = fltarr(cols,rows,9)
        endif
        outim[*,*,4] = envi_get_data(fid=fid,dims=dims,pos=0)
        envi_file_mng,/remove,id=fid        
      endif      
      if (stregex(file,'hv_hv_geo',/boolean) or stregex(file,'C22.tif',/boolean) or stregex(file,'C22.bin',/boolean)) and not stregex(file,'hdr|sml',/boolean) then begin 
        envi_open_file, file, r_fid=fid
        if nodims then envi_file_query, fid, dims=dims
        if n_elements(outim) eq 0 then begin
          cols = dims[2]-dims[1]+1
          rows = dims[4]-dims[3]+1
          outim = fltarr(cols,rows,9)
        endif
        outim[*,*,5] = envi_get_data(fid=fid,dims=dims,pos=0)
; map tie point (dual)
        map_info = envi_get_map_info(fid=fid)
        envi_convert_file_coordinates, fid, $
          dims[1], dims[3], e, n, /to_map
        map_info.mc = [0D,0D,e,n]
        envi_file_mng,/remove,id=fid        
      endif   
      if (stregex(file,'re_hv_vv_geo',/boolean) or stregex(file,'C23_real.tif',/boolean) or stregex(file,'C23_real.bin',/boolean)) and not stregex(file,'hdr|sml',/boolean) then begin 
        envi_open_file, file, r_fid=fid
        if nodims then envi_file_query, fid, dims=dims
        if n_elements(outim) eq 0 then begin
          cols = dims[2]-dims[1]+1
          rows = dims[4]-dims[3]+1
          outim = fltarr(cols,rows,9)
        endif
        outim[*,*,6] = envi_get_data(fid=fid,dims=dims,pos=0)
        envi_file_mng,/remove,id=fid        
      endif   
      if (stregex(file,'im_hv_vv_geo',/boolean) or stregex(file,'C23_imag.tif',/boolean) or stregex(file,'C23_imag.bin',/boolean)) and not stregex(file,'hdr|sml',/boolean) then begin 
        envi_open_file, file, r_fid=fid
        if nodims then envi_file_query, fid, dims=dims
        if n_elements(outim) eq 0 then begin
          cols = dims[2]-dims[1]+1
          rows = dims[4]-dims[3]+1
          outim = fltarr(cols,rows,9)
        endif
        outim[*,*,7] = envi_get_data(fid=fid,dims=dims,pos=0)
        envi_file_mng,/remove,id=fid        
      endif   
      if (stregex(file,'vv_vv_geo',/boolean) or stregex(file,'C33.tif',/boolean) or stregex(file,'C33.bin',/boolean)) and not stregex(file,'hdr|sml',/boolean) then begin 
        envi_open_file, file, r_fid=fid
        if nodims then envi_file_query, fid, dims=dims
        if n_elements(outim) eq 0 then begin
          cols = dims[2]-dims[1]+1
          rows = dims[4]-dims[3]+1
          outim = fltarr(cols,rows,9)
        endif
        outim[*,*,8] = envi_get_data(fid=fid,dims=dims,pos=0)   
;      map tie point (dual)
        map_info = envi_get_map_info(fid=fid)
        envi_convert_file_coordinates, fid, $
          dims[1], dims[3], e, n, /to_map
        map_info.mc = [0D,0D,e,n]    
        envi_file_mng,/remove,id=fid           
      endif     
   endforeach    
   if n_elements(outim) eq 0 then return, 0     
; clean up the image bands   
   idx = where(finite(outim,/NAN),count)
   if count gt 0 then outim[idx]=0.0
   if (size(outim))[0] eq 3 then begin
     for i = 0, 8 do if total(outim[*,*,i]) eq 0 then bandnames[i] = '-'  
     idx = where(bandnames ne '-',bands)
     if bands gt 0 then outim = outim[*,*,idx] else message, 'no image bands'
     bnames = bandnames[idx]
   end else begin
     bnames = bandnames[0] 
   endelse   
   return, 1

end

